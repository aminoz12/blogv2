---
import Layout from '../../layouts/Layout.astro';
import { getArticleBySlug, incrementViewCount, initializeDatabase } from '../../utils/database.js';
import Breadcrumbs from '../../components/blog/Breadcrumbs.astro';
import CategoryBadge from '../../components/CategoryBadge.astro';
import VisitorCounter from '../../components/blog/VisitorCounter.astro';
import SocialShare from '../../components/blog/SocialShare.astro';
import CommentSection from '../../components/blog/CommentSection.astro';
import CallToAction from '../../components/blog/CallToAction.astro';
import EngagementStats from '../../components/blog/EngagementStats.astro';

// Get the slug from the URL - Dynamic approach
const { slug } = Astro.params;

// Get article data dynamically
let article = null;
try {
  await initializeDatabase();
  const { getArticleBySlug } = await import('../../utils/database.js');
  article = await getArticleBySlug(slug);
  
  if (!article) {
    console.warn('‚ùå Article not found for slug:', slug);
    return new Response(null, {
      status: 404,
      statusText: 'Article not found'
    });
  }
  
  console.log('‚úÖ Article loaded for slug:', slug, 'Title:', article.title);
} catch (error) {
  console.error('‚ùå Error loading article:', error);
  return new Response(null, {
    status: 500,
    statusText: 'Error loading article'
  });
}

// Increment view count
if (article?.id) {
  try {
    await incrementViewCount(article.id);
  } catch (error) {
    console.error('‚ùå Error incrementing view count:', error);
  }
}

// Parse tags
const tags = article?.tags ? (typeof article.tags === 'string' ? JSON.parse(article.tags) : article.tags) : [];

// Parse featured image with comprehensive error handling
const featuredImage = (() => {
  if (!article?.featured_image) {
    console.log('‚ö†Ô∏è No featured_image for article:', article?.title);
    return null;
  }
  
  try {
    console.log('üîç Processing featured image for article:', article.title);
    console.log('üîç Raw image data type:', typeof article.featured_image);
    console.log('üîç Raw image data:', typeof article.featured_image === 'string' ? article.featured_image.substring(0, 100) + '...' : article.featured_image);
    
    // Handle different data types
    let imageData = article.featured_image;
    
    // If it's already an object, use it directly
    if (typeof imageData === 'object' && imageData !== null) {
      console.log('üîç Image data is already an object');
      const imageUrl = imageData.url || imageData.src;
      
      if (imageUrl) {
        // Handle URLs that are already in blog API format
        if (imageUrl.startsWith('/api/uploads/')) {
          console.log('üîÑ Image URL already in blog API format:', imageUrl);
          return { 
            url: imageUrl,
            alt: imageData.alt || article.title,
            caption: imageData.caption || ''
          };
        }
        // Handle admin localhost URLs
        else if (imageUrl.includes('localhost:4322') || imageUrl.includes('localhost:4323')) {
          // Extract just the filename from admin URLs
          const match = imageUrl.match(/\/uploads\/(.+)$/);
          if (match) {
            const convertedUrl = `/api/uploads/${match[1]}`;
            console.log('üîÑ Converted admin object URL to blog API:', convertedUrl);
            return { 
              url: convertedUrl,
              alt: imageData.alt || article.title,
              caption: imageData.caption || ''
            };
          }
        } 
        // Handle relative /uploads/ URLs
        else if (imageUrl.startsWith('/uploads/')) {
          const convertedUrl = `/api/uploads${imageUrl}`;
          console.log('üîÑ Converted relative object URL to blog API:', convertedUrl);
          return { 
            url: convertedUrl,
            alt: imageData.alt || article.title,
            caption: imageData.caption || ''
          };
        }
        // Handle absolute URLs (including deployed URLs)
        else if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
          // If it's pointing to the admin service, convert it
          if (imageUrl.includes('mad2moi-admin') || imageUrl.includes('mad2moi.store/admin')) {
            const match = imageUrl.match(/\/uploads\/(.+)$/);
            if (match) {
              const convertedUrl = `/api/uploads/${match[1]}`;
              console.log('üîÑ Converted deployed admin URL to blog API:', convertedUrl);
              return { 
                url: convertedUrl,
                alt: imageData.alt || article.title,
                caption: imageData.caption || ''
              };
            }
          }
          // For other absolute URLs, use as-is
          return { 
            url: imageUrl,
            alt: imageData.alt || article.title,
            caption: imageData.caption || ''
          };
        }
        
        return { 
          url: imageUrl,
          alt: imageData.alt || article.title,
          caption: imageData.caption || ''
        };
      }
      
      console.warn('‚ö†Ô∏è Object missing valid URL property');
      return null;
    }
    
    // If it's a string, try to parse as JSON first
    if (typeof imageData === 'string') {
      try {
        const parsed = JSON.parse(imageData);
        console.log('üîç Successfully parsed JSON from string');
        
        let imageUrl = null;
        
        // Check for url property
        if (parsed?.url) {
          imageUrl = parsed.url;
          console.log('üîç Found url property:', imageUrl);
          
          // Handle nested JSON strings
          if (typeof imageUrl === 'string' && imageUrl.startsWith('{')) {
            try {
              const urlData = JSON.parse(imageUrl);
              imageUrl = urlData.url || imageUrl;
              console.log('üîç Extracted from nested JSON:', imageUrl);
            } catch (e) {
              console.warn('‚ö†Ô∏è Could not parse nested URL JSON:', e.message);
            }
          }
        }
        
        // Check for src property if no url
        if (!imageUrl && parsed?.src) {
          imageUrl = parsed.src;
          console.log('üîç Found src property:', imageUrl);
        }
        
        // Convert admin URLs to blog API URLs
        if (imageUrl) {
          // Handle URLs that are already in blog API format
          if (imageUrl.startsWith('/api/uploads/')) {
            console.log('üîÑ Image URL already in blog API format:', imageUrl);
            return { 
              url: imageUrl,
              alt: parsed.alt || article.title,
              caption: parsed.caption || ''
            };
          }
          // Handle admin localhost URLs
          else if (imageUrl.includes('localhost:4322') || imageUrl.includes('localhost:4323')) {
            // Extract just the filename from admin URLs
            const match = imageUrl.match(/\/uploads\/(.+)$/);
            if (match) {
              const convertedUrl = `/api/uploads/${match[1]}`;
              console.log('üîÑ Converted admin JSON URL to blog API:', convertedUrl);
              return { 
                url: convertedUrl,
                alt: parsed.alt || article.title,
                caption: parsed.caption || ''
              };
            }
          } 
          // Handle relative /uploads/ URLs
          else if (imageUrl.startsWith('/uploads/')) {
            const convertedUrl = `/api/uploads${imageUrl}`;
            console.log('üîÑ Converted relative JSON URL to blog API:', convertedUrl);
            return { 
              url: convertedUrl,
              alt: parsed.alt || article.title,
              caption: parsed.caption || ''
            };
          }
          // Handle deployed admin URLs
          else if (imageUrl.includes('mad2moi-admin') || imageUrl.includes('mad2moi.store/admin')) {
            const match = imageUrl.match(/\/uploads\/(.+)$/);
            if (match) {
              const convertedUrl = `/api/uploads/${match[1]}`;
              console.log('üîÑ Converted deployed admin URL to blog API:', convertedUrl);
              return { 
                url: convertedUrl,
                alt: parsed.alt || article.title,
                caption: parsed.caption || ''
              };
            }
          }
          // Handle absolute URLs
          else if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
            // If it's pointing to the admin service, convert it
            if (imageUrl.includes('mad2moi-admin') || imageUrl.includes('mad2moi.store/admin')) {
              const match = imageUrl.match(/\/uploads\/(.+)$/);
              if (match) {
                const convertedUrl = `/api/uploads/${match[1]}`;
                console.log('üîÑ Converted deployed admin URL to blog API:', convertedUrl);
                return { 
                  url: convertedUrl,
                  alt: parsed.alt || article.title,
                  caption: parsed.caption || ''
                };
              }
            }
            // For other absolute URLs, use as-is
            return { 
              url: imageUrl,
              alt: parsed.alt || article.title,
              caption: parsed.caption || ''
            };
          }
          
          // Return as-is if it's already a valid URL
          return { 
            url: imageUrl,
            alt: parsed.alt || article.title,
            caption: parsed.caption || ''
          };
        }
        
        console.warn('‚ö†Ô∏è No valid image URL found in parsed JSON');
        return null;
        
      } catch (parseError) {
        console.log('üîç String is not JSON, treating as direct URL');
        
        // Handle URLs that are already in blog API format
        if (imageData.startsWith('/api/uploads/')) {
          console.log('üîÑ String URL already in blog API format:', imageData);
          return { url: imageData, alt: article.title };
        }
        
        // Handle admin localhost URLs
        if (imageData.includes('localhost:4322') || imageData.includes('localhost:4323')) {
          const match = imageData.match(/\/uploads\/(.+)$/);
          if (match) {
            const convertedUrl = `/api/uploads/${match[1]}`;
            console.log('üîÑ Converted admin URL string to blog API:', convertedUrl);
            return { url: convertedUrl, alt: article.title };
          }
        }
        
        // Handle deployed admin URLs
        if (imageData.includes('mad2moi-admin') || imageData.includes('mad2moi.store/admin')) {
          const match = imageData.match(/\/uploads\/(.+)$/);
          if (match) {
            const convertedUrl = `/api/uploads/${match[1]}`;
            console.log('üîÑ Converted deployed admin URL string to blog API:', convertedUrl);
            return { url: convertedUrl, alt: article.title };
          }
        }
        
        // Try as relative URL from admin
        if (imageData.startsWith('/uploads/')) {
          const convertedUrl = `/api/uploads${imageData}`;
          console.log('üîÑ Converted relative URL string to blog API:', convertedUrl);
          return { url: convertedUrl, alt: article.title };
        }
        
        // Handle absolute URLs
        if (imageData.startsWith('http://') || imageData.startsWith('https://')) {
          // If it's pointing to the admin service, convert it
          if (imageData.includes('mad2moi-admin') || imageData.includes('mad2moi.store/admin')) {
            const match = imageData.match(/\/uploads\/(.+)$/);
            if (match) {
              const convertedUrl = `/api/uploads/${match[1]}`;
              console.log('üîÑ Converted deployed admin URL to blog API:', convertedUrl);
              return { url: convertedUrl, alt: article.title };
            }
          }
          // For other absolute URLs, use as-is
          return { url: imageData, alt: article.title };
        }
        
        // Handle data URLs
        if (imageData.startsWith('data:image/')) {
          console.log('üîç Direct data URL found');
          return { url: imageData, alt: article.title };
        }
        
        console.warn('‚ö†Ô∏è Unrecognized image format:', imageData.substring(0, 100));
        return null;
      }
    }
    
    console.warn('‚ö†Ô∏è Unexpected image data type:', typeof imageData);
    return null;
    
  } catch (error) {
    console.error('‚ùå Error processing featured_image:', error.message);
    console.error('‚ùå Stack trace:', error.stack);
    console.error('‚ùå Raw data causing error:', article.featured_image);
    return null;
  }
})();

// Format dates
const publishedDate = article?.published_at ? new Date(article.published_at) : new Date(article?.created_at);
const formattedDate = publishedDate.toLocaleDateString('fr-FR', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Helper function to calculate read time
function calculateReadTime(content) {
  if (!content) return '1 min';
  const wordsPerMinute = 200;
  const wordCount = content.split(/\s+/).length;
  const readTime = Math.ceil(wordCount / wordsPerMinute);
  return `${readTime} min`;
}

// Set page title and meta
const pageTitle = article?.meta_title || article?.title || 'Article';
const pageDescription = article?.meta_description || article?.excerpt || 'D√©couvrez cet article sur Mad2Moi';
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="min-h-screen bg-gradient-to-br from-primary-900 via-secondary-900 to-primary-800">
    <!-- Hero Section -->
    <div class="relative overflow-hidden">
      <!-- Background Image -->
      {featuredImage && (
        <div class="absolute inset-0 z-0">
          <img 
            src={featuredImage.url} 
            alt={article.title}
            class="w-full h-full object-cover opacity-20"
          />
          <div class="absolute inset-0 bg-gradient-to-b from-transparent via-secondary-900/50 to-secondary-900"></div>
        </div>
      )}
      
      <!-- Content -->
      <div class="relative z-10 container mx-auto px-4 py-16">
        <div class="max-w-4xl mx-auto text-center">
          <!-- Category Badge -->
          {article?.category_name && (
            <CategoryBadge 
              name={article.category_name} 
              color={article.category_color} 
              size="lg" 
              className="mb-6"
            />
          )}
          
          <!-- Title -->
          <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight">
            {article?.title}
          </h1>
          
          <!-- Excerpt -->
          {article?.excerpt && (
            <p class="text-xl text-secondary-300 mb-8 max-w-3xl mx-auto leading-relaxed">
              {article.excerpt}
            </p>
          )}
          
          <!-- Meta Information -->
          <div class="flex flex-wrap items-center justify-center gap-6 text-secondary-400 text-sm">
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
              </svg>
              <span>{article?.author_name || 'Mad2Moi Team'}</span>
            </div>
            
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
              </svg>
              <span>{formattedDate}</span>
            </div>
            
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
              </svg>
              <span>{article?.view_count || 0} vues</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Breadcrumbs -->
    <div class="container mx-auto px-4 -mt-8 mb-8">
      <Breadcrumbs 
        items={[
          { label: 'Accueil', href: '/' },
          { label: 'Blog', href: '/blog' },
          { label: article?.category_name || 'Article', href: `/blog?category=${article?.category_slug || ''}` },
          { label: article?.title || 'Article', href: '#' }
        ]}
      />
    </div>

    <!-- Article Content -->
    <div class="container mx-auto px-4 pb-16">
      <div class="max-w-4xl mx-auto">
        <!-- Main Article Card -->
        <article class="bg-gradient-to-br from-secondary-800/50 to-secondary-900/50 backdrop-blur-sm border border-secondary-700/50 rounded-2xl shadow-2xl shadow-black/20 overflow-hidden">
          <!-- Featured Image -->
          {featuredImage && featuredImage.url && (
            <div class="relative overflow-hidden">
              <img 
                src={featuredImage.url} 
                alt={featuredImage.alt || article?.title}
                class="w-full h-96 object-cover"
                loading="eager"
                decoding="async"
                onload="this.style.opacity='1'"
                onerror="this.style.display='none'; console.error('Failed to load article image:', this.src)"
                style="opacity: 0; transition: opacity 0.3s ease-in-out"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-secondary-900/80 via-transparent to-transparent"></div>
              {featuredImage.caption && (
                <div class="absolute bottom-4 left-4 right-4">
                  <p class="text-sm text-secondary-300 bg-black/50 backdrop-blur-sm rounded-lg px-3 py-2">
                    {featuredImage.caption}
                  </p>
                </div>
              )}
            </div>
          )}
          
          <!-- Content Container -->
          <div class="p-8 md:p-12">
            <!-- Article Content with Enhanced Typography -->
            <div class="article-content prose prose-lg prose-invert max-w-none"
                 style="
                   --tw-prose-body: #FFFFFF;
                   --tw-prose-headings: #FFFFFF;
                   --tw-prose-lead: #FFFFFF;
                   --tw-prose-links: #60A5FA;
                   --tw-prose-bold: #FFFFFF;
                   --tw-prose-counters: #FFFFFF;
                   --tw-prose-bullets: #FFFFFF;
                   --tw-prose-hr: #374151;
                   --tw-prose-quotes: #FFFFFF;
                   --tw-prose-quote-borders: #60A5FA;
                   --tw-prose-captions: #FFFFFF;
                   --tw-prose-code: #FFFFFF;
                   --tw-prose-pre-code: #FFFFFF;
                   --tw-prose-pre-bg: #1F2937;
                   --tw-prose-th-borders: #374151;
                   --tw-prose-td-borders: #2D3748;
                 "
                 set:html={article?.content || ''} 
            />
            
            <!-- Reading Progress Indicator -->
            <div class="mt-8 pt-6 border-t border-secondary-700/50">
              <div class="flex items-center justify-between text-sm text-secondary-400">
                <span>üìñ Temps de lecture estim√©</span>
                <span class="font-medium">{calculateReadTime(article?.content || '')}</span>
              </div>
            </div>
            
            <!-- Tags Section -->
            {tags && tags.length > 0 && (
              <div class="mt-8 pt-8 border-t border-secondary-700/50">
                <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                  <span class="text-primary-400">üè∑Ô∏è</span>
                  Tags
                </h3>
                <div class="flex flex-wrap gap-3">
                  {tags.map(tag => (
                    <a href={`/blog?search=${encodeURIComponent(tag)}`} 
                       class="group relative inline-flex items-center px-4 py-2 bg-gradient-to-r from-primary-900/40 to-primary-800/40 hover:from-primary-800/60 hover:to-primary-700/60 border border-primary-700/50 hover:border-primary-600/70 rounded-full text-sm text-primary-300 hover:text-primary-200 transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-primary-500/25">
                      <span class="relative z-10">#{tag}</span>
                      <div class="absolute inset-0 bg-gradient-to-r from-primary-600/20 to-primary-500/20 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    </a>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Article Metadata -->
            <div class="mt-8 pt-8 border-t border-secondary-700/50">
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- Author Info -->
                <div class="flex items-center space-x-3">
                  <div class="w-12 h-12 bg-gradient-to-br from-primary-500 to-primary-700 rounded-full flex items-center justify-center">
                    <span class="text-white font-bold text-lg">{(article?.author_name || 'M')[0].toUpperCase()}</span>
                  </div>
                  <div>
                    <p class="text-sm text-secondary-400">Auteur</p>
                    <p class="text-white font-medium">{article?.author_name || 'Mad2Moi Team'}</p>
                  </div>
                </div>
                
                <!-- Publication Date -->
                <div class="flex items-center space-x-3">
                  <div class="w-12 h-12 bg-gradient-to-br from-sensual-500 to-sensual-700 rounded-full flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <p class="text-sm text-secondary-400">Publi√© le</p>
                    <p class="text-white font-medium">{formattedDate}</p>
                  </div>
                </div>
                
                <!-- Views Count -->
                <div class="flex items-center space-x-3">
                  <div class="w-12 h-12 bg-gradient-to-br from-secondary-600 to-secondary-800 rounded-full flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                      <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <p class="text-sm text-secondary-400">Vues</p>
                    <p class="text-white font-medium">{(article?.view_count || 0).toLocaleString()} vues</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </article>
        
        <!-- Engagement Stats -->
        <div class="mt-12">
          <EngagementStats 
            views={article?.view_count || 0}
            likes={0}
            shares={0}
          />
        </div>
        
        <!-- Social Share -->
        <div class="mt-8">
          <SocialShare 
            title={article?.title}
            url={Astro.url.href}
            description={article?.excerpt}
          />
        </div>
        
        <!-- Call to Action -->
        <div class="mt-12">
          <CallToAction />
        </div>
        
        <!-- Comments Section -->
        <div class="mt-12">
          <CommentSection articleId={article?.id} />
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Enhanced Article Content Styling */
  .article-content {
    line-height: 1.8;
    font-size: 1.125rem;
    color: #FFFFFF;
  }
  
  /* Typography Enhancements */
  .article-content h1,
  .article-content h2,
  .article-content h3,
  .article-content h4,
  .article-content h5,
  .article-content h6 {
    font-weight: 700;
    line-height: 1.3;
    margin-top: 2.5rem;
    margin-bottom: 1.25rem;
    position: relative;
    color: #FFFFFF;
  }
  
  .article-content h1 {
    font-size: 2.25rem;
    background: linear-gradient(135deg, #FFFFFF 0%, #F3F4F6 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .article-content h2 {
    font-size: 1.875rem;
    color: #FFFFFF;
    border-bottom: 2px solid rgba(96, 165, 250, 0.3);
    padding-bottom: 0.5rem;
  }
  
  .article-content h3 {
    font-size: 1.5rem;
    color: #FFFFFF;
    position: relative;
    padding-left: 1rem;
  }
  
  .article-content h3::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.25rem;
    width: 4px;
    height: 1.5rem;
    background: linear-gradient(135deg, #60A5FA, #3B82F6);
    border-radius: 2px;
  }
  
  .article-content h4,
  .article-content h5,
  .article-content h6 {
    color: #FFFFFF;
  }
  
  /* Paragraph Styling */
  .article-content p {
    margin-bottom: 1.5rem;
    text-align: justify;
    hyphens: auto;
    color: #FFFFFF;
  }
  
  .article-content p:first-of-type {
    font-size: 1.25rem;
    font-weight: 500;
    color: #FFFFFF;
    line-height: 1.7;
  }
  
  /* Links */
  .article-content a {
    color: #60A5FA;
    text-decoration: none;
    border-bottom: 1px solid rgba(96, 165, 250, 0.3);
    transition: all 0.3s ease;
    position: relative;
  }
  
  .article-content a:hover {
    color: #93C5FD;
    border-bottom-color: #93C5FD;
    background: rgba(96, 165, 250, 0.1);
    padding: 0.125rem 0.25rem;
    margin: -0.125rem -0.25rem;
    border-radius: 0.25rem;
  }
  
  /* Lists */
  .article-content ul,
  .article-content ol {
    margin: 1.5rem 0;
    padding-left: 1.5rem;
    color: #FFFFFF;
  }
  
  .article-content li {
    margin-bottom: 0.75rem;
    line-height: 1.7;
    color: #FFFFFF;
  }
  
  .article-content ul li::marker {
    color: #60A5FA;
  }
  
  .article-content ol li::marker {
    color: #60A5FA;
    font-weight: 600;
  }
  
  /* Blockquotes */
  .article-content blockquote {
    position: relative;
    margin: 2rem 0;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, rgba(96, 165, 250, 0.1) 0%, rgba(59, 130, 246, 0.05) 100%);
    border-left: 4px solid #60A5FA;
    border-radius: 0 0.75rem 0.75rem 0;
    font-style: italic;
    font-size: 1.125rem;
    color: #FFFFFF;
  }
  
  .article-content blockquote::before {
    content: '\201C';
    position: absolute;
    top: 0.5rem;
    left: 0.75rem;
    font-size: 3rem;
    color: #60A5FA;
    opacity: 0.3;
  }
  
  /* Code */
  .article-content code {
    background: rgba(55, 65, 81, 0.8);
    color: #FFFFFF;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    border: 1px solid rgba(75, 85, 99, 0.5);
  }
  
  .article-content pre {
    background: #1F2937;
    border: 1px solid #374151;
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin: 2rem 0;
    overflow-x: auto;
    position: relative;
  }
  
  .article-content pre code {
    background: none;
    border: none;
    padding: 0;
    color: #FFFFFF;
  }
  
  /* Tables */
  .article-content table {
    width: 100%;
    margin: 2rem 0;
    border-collapse: collapse;
    background: rgba(31, 41, 55, 0.5);
    border-radius: 0.75rem;
    overflow: hidden;
  }
  
  .article-content th,
  .article-content td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #374151;
    color: #FFFFFF;
  }
  
  .article-content th {
    background: rgba(55, 65, 81, 0.8);
    font-weight: 600;
    color: #FFFFFF;
  }
  
  .article-content td {
    color: #FFFFFF;
  }
  
  /* Images */
  .article-content img {
    border-radius: 0.75rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    margin: 2rem auto;
    transition: transform 0.3s ease;
  }
  
  .article-content img:hover {
    transform: scale(1.02);
  }
  
  /* Horizontal Rules */
  .article-content hr {
    margin: 3rem 0;
    border: none;
    height: 1px;
    background: linear-gradient(90deg, transparent, #374151, transparent);
  }
  
  /* Strong/Bold */
  .article-content strong,
  .article-content b {
    color: #FFFFFF;
    font-weight: 700;
  }
  
  /* Emphasis/Italic */
  .article-content em,
  .article-content i {
    color: #FFFFFF;
    font-style: italic;
  }
  
  /* Small text */
  .article-content small {
    color: #FFFFFF;
    font-size: 0.875rem;
    opacity: 0.8;
  }
  
  /* Mark/Highlight */
  .article-content mark {
    background: rgba(251, 191, 36, 0.3);
    color: #FEF3C7;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
  }
</style>
