---
import { executeQueryFactory } from '../../utils/databaseFactory.js';

export interface Props {
  postSlug: string;
  postTitle: string;
}

const { postSlug, postTitle } = Astro.props;

console.log('üîç CommentSection props:', { postSlug, postTitle });

// Fetch comments for this article
let comments = [];
let commentCount = 0;

try {
  // Get comments for this article (including legacy {postSlug} comments)
  const commentsQuery = `
    SELECT * FROM comments
    WHERE article_slug = ? OR article_slug = "{postSlug}"
    ORDER BY created_at ASC
    LIMIT 10
  `;
  comments = await executeQueryFactory(commentsQuery, [postSlug]);
  console.log('üîç Comments fetched:', comments.length, 'comments for slug:', postSlug);
  
  // Get comment count (including legacy {postSlug} comments)
  const countQuery = `
    SELECT COUNT(*) as count
    FROM comments
    WHERE article_slug = ? OR article_slug = "{postSlug}"
  `;
  const countResult = await executeQueryFactory(countQuery, [postSlug]);
  commentCount = countResult[0]?.count || 0;
  console.log('üîç Comment count:', commentCount);
} catch (error) {
  console.error('‚ùå Error fetching comments:', error);
  comments = [];
  commentCount = 0;
}

// Helper function to format date
function formatDate(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);
  
  if (diffInSeconds < 60) return 'Il y a quelques secondes';
  if (diffInSeconds < 3600) return `Il y a ${Math.floor(diffInSeconds / 60)} minute(s)`;
  if (diffInSeconds < 86400) return `Il y a ${Math.floor(diffInSeconds / 3600)} heure(s)`;
  if (diffInSeconds < 2592000) return `Il y a ${Math.floor(diffInSeconds / 86400)} jour(s)`;
  
  return date.toLocaleDateString('fr-FR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// Helper function to get initials
function getInitials(name) {
  return name
    .split(' ')
    .map(word => word.charAt(0))
    .join('')
    .toUpperCase()
    .substring(0, 2);
}
---

<section class="mt-16 p-8 bg-secondary-800/50 rounded-xl border border-secondary-700/30 shadow-xl">
  <h3 class="text-3xl font-bold text-white mb-8 font-elegant text-center">
    üí¨ Commentaires ({commentCount})
  </h3>
  
  <!-- Comment Form -->
  <div class="mb-10 p-8 bg-secondary-700/30 rounded-xl border border-secondary-600/30 shadow-lg">
    <h4 class="text-xl font-semibold text-white mb-6 flex items-center gap-3">
      <span class="text-2xl">‚úçÔ∏è</span>
      Ajouter un commentaire
    </h4>
    <form id="comment-form" class="space-y-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label class="block text-sm font-medium text-secondary-300 mb-2">Votre nom *</label>
          <input
            type="text"
            name="name"
            placeholder="Entrez votre nom"
            class="w-full px-4 py-3 bg-secondary-600/50 border border-secondary-500/30 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-transparent text-white placeholder-secondary-300 transition-all duration-200"
            required
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-secondary-300 mb-2">Votre email</label>
          <input
            type="email"
            name="email"
            placeholder="Entrez votre email (optionnel)"
            class="w-full px-4 py-3 bg-secondary-600/50 border border-secondary-500/30 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-transparent text-white placeholder-secondary-300 transition-all duration-200"
          />
        </div>
      </div>
      <div>
        <label class="block text-sm font-medium text-secondary-300 mb-2">Votre commentaire *</label>
        <textarea
          name="comment"
          placeholder="Partagez vos pens√©es sur cet article..."
          rows="5"
          class="w-full px-4 py-3 bg-secondary-600/50 border border-secondary-500/30 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-transparent text-white placeholder-secondary-300 resize-none transition-all duration-200"
          required
        ></textarea>
      </div>
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <label class="flex items-center gap-3 text-sm text-secondary-300 hover:text-secondary-200 transition-colors cursor-pointer">
          <input type="checkbox" name="notify" class="w-4 h-4 rounded border-secondary-500/30 bg-secondary-600/50 text-primary-400 focus:ring-primary-400 focus:ring-2">
          <span>M'notifier des r√©ponses</span>
        </label>
        <button
          type="submit"
          class="px-8 py-3 bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white font-semibold rounded-lg transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-xl flex items-center gap-2"
        >
          <span>üí¨</span>
          <span>Publier le commentaire</span>
        </button>
      </div>
    </form>
  </div>

  <!-- Comments List -->
  <div class="space-y-6">
    {comments.length > 0 ? (
      comments.map((comment) => (
        <div class="comment-item p-6 bg-secondary-700/20 rounded-xl border border-secondary-600/20 hover:border-secondary-500/40 transition-all duration-200">
          <div class="flex items-start gap-4 mb-4">
            <div class="w-12 h-12 bg-gradient-to-br from-primary-500 to-secondary-500 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg">
              {getInitials(comment.author_name)}
            </div>
            <div class="flex-1">
              <div class="flex flex-wrap items-center gap-3 mb-2">
                <span class="font-semibold text-white text-lg">{comment.author_name}</span>
                <span class="text-sm text-secondary-400">{formatDate(comment.created_at)}</span>
              </div>
              <p class="text-secondary-200 leading-relaxed text-base whitespace-pre-wrap">
                {comment.content}
              </p>
            </div>
          </div>
        </div>
      ))
    ) : (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üí¨</div>
        <h4 class="text-xl font-semibold text-secondary-300 mb-2">Aucun commentaire pour le moment</h4>
        <p class="text-secondary-400">Soyez le premier √† partager votre avis sur cet article !</p>
      </div>
    )}
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üîç Setting up comment form');
    const commentForm = document.getElementById('comment-form');
    
    if (commentForm) {
      console.log('‚úÖ Comment form found');
      
      commentForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        console.log('üì§ Form submitted');
        
        const formData = new FormData(e.target);
        const commentData = {
          article_slug: '{postSlug}',
          article_title: '{postTitle}',
          author_name: formData.get('name'),
          author_email: formData.get('email'),
          content: formData.get('comment'),
          notify_replies: formData.get('notify') === 'on'
        };
        
        console.log('üì§ Comment data:', commentData);
        
        // Show loading state
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = 'Publication...';
        submitBtn.disabled = true;
        
        try {
          console.log('üåê Sending request to /api/comments');
          
          const response = await fetch('/api/comments', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(commentData)
          });
          
          console.log('üìä Response status:', response.status);
          const result = await response.json();
          console.log('üìã Response result:', result);
          
          if (result.success) {
            console.log('‚úÖ Comment submitted successfully');
            
            // Show success message
            const successDiv = document.createElement('div');
            successDiv.className = 'mb-4 p-4 bg-green-500/20 border border-green-500/30 rounded-lg text-green-300';
            successDiv.innerHTML = `
              <div class="flex items-center gap-2">
                <span class="text-lg">‚úÖ</span>
                <span>${result.message}</span>
              </div>
            `;
            
            commentForm.parentNode.insertBefore(successDiv, commentForm);
            
            // Reset form
            e.target.reset();
            
            // Reload page to show new comment
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            throw new Error(result.error || 'Erreur lors de la publication');
          }
          
        } catch (error) {
          console.error('‚ùå Comment submission error:', error);
          
          // Show error message
          const errorDiv = document.createElement('div');
          errorDiv.className = 'mb-4 p-4 bg-red-500/20 border border-red-500/30 rounded-lg text-red-300';
          errorDiv.innerHTML = `
            <div class="flex items-center gap-2">
              <span class="text-lg">‚ùå</span>
              <span>Erreur: ${error.message}</span>
            </div>
          `;
          
          commentForm.parentNode.insertBefore(errorDiv, commentForm);
          
          // Remove error message after 5 seconds
          setTimeout(() => {
            errorDiv.remove();
          }, 5000);
        } finally {
          // Reset button state
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
        }
      });
    } else {
      console.log('‚ùå Comment form not found');
    }
  });
</script>
